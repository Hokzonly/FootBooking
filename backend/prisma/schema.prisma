// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ACADEMY_ADMIN
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  academy   Academy? @relation("AcademyAdmin", fields: [academyId], references: [id])
  academyId Int?     @unique
  bookings  Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Academy {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  phone     String
  description String
  image     String
  rating    Float?
  openingHours String?
  monthlyPrice Int?
  gallery   String[] @default([])
  fields    Field[]
  admin     User?    @relation("AcademyAdmin")
}

model Field {
  id         Int      @id @default(autoincrement())
  type       String
  capacity   Int
  pricePerHour Int
  image      String
  academy    Academy  @relation(fields: [academyId], references: [id])
  academyId  Int
  bookings   Booking[]
}

model Booking {
  id           Int      @id @default(autoincrement())
  user         User?    @relation(fields: [userId], references: [id])
  userId       Int?
  field        Field    @relation(fields: [fieldId], references: [id])
  fieldId      Int
  date         DateTime
  time         String
  customerName String
  customerEmail String
  customerPhone String
  createdAt    DateTime @default(now())

  @@unique([fieldId, date, time]) // Prevent double bookings for the same field, date, and time
}
